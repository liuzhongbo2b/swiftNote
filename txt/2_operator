//一元运算符只有一个，就是“ - ”，也就是取负数用的那个
//像其他语言里面的“ -- ” 和 “ ++ ”运算符是没有的，取而代之的是“ += ” 和 “ -= ”
var num = 1
num += 1   // 意思就是  num = num + 1
print(num)

//二元运算符：+    -    *    /（这个除号会忽略余数，结果取整）    %（取余数，也是整数）
//对应的+=     -=    *=    /=    %=
//但是！！！浮点数取余数不能用“ % ”，要用下面这个函数
var exam = 10.0
exam = exam.truncatingRemainder(dividingBy: 3.3)
print(exam)

//关系运算符==    ！=    >    <    >=     <=    ===     !==
//关系运算符的结果是true或者false
//=== 和！==运用于引用类型的比较，更通俗的说，比较两个对象，值类型不能用这两个运算符进行比较
//更通俗的讲，只有对象是引用类型，所以只有对象才能用三等号
let a = 1
let b = 2
print(a > b)
print(a < b)
print(a == b)
//print(a === b) 会报错的！！！二傻子

//逻辑运算符！   ||    &&
//逻辑运算符两边都得是布尔型的值

//位运算符
let A: UInt8 = 0b10110010   //UInt8：无符号八位整数
let B: UInt8 = 0b01011110   //0b表示的是二进制表示
// ~   位反
print(~A)          //01001101，0变1，1变0
// &   位与
print(A & B)       //00010010    都为1才为1，否则为0
// ^    位异或
print(A ^ B)        //11101100    不同为1，相同为0
// |     位或
print(A | B)        //11111110     至少有一个1就是1

let c: Int8 = 0b1100
// <<   左移，低位用0补齐
print(c >> 2)       //00000011
// >>   右移，无符号整数高位用0补齐，有符号整数高位用符号位补齐（最高位就是符号位）
print(c << 2)       //00110000
//有兴趣可以深入了解一下移位，开发过程不常用，知识比较底层

//三元运算符  ？ ：这里就不说了，自个儿都会
print(10 > 5 ? 10 : 5)   //问号前面是bool表达式，若为真，该式子结果为冒号前的值，否则为后面的
//
// “ ？ ” ，这个就很重要了，用来声明可选类型，后面会说到
// “ ！ ”， 这个是与问号进行配套的，是对可选类型进行显示拆包用的
// -> 用来说明函数或者方法的返回值类型
//  ,    用来集合分割元素
var arr = [91, 99, 43, 76]  //这是一个数组
print(arr[2])   //数组下标l从零开始，所以这个打印第三个，也就是43
//  ：   用于字典集合分割“键值”对
var airport = ["TYO" : "Tokyo", "DUB" : "Dublin"]
print(airport)
